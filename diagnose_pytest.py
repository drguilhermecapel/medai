#!/usr/bin/env python3
"""
Diagn√≥stico espec√≠fico para descobrir exatamente qual √© o problema com pytest
"""

import subprocess
import sys
import os
from pathlib import Path


def run_command_detailed(cmd, description=""):
    """Executa comando e mostra output detalhado"""
    print(f"üîç {description}")
    print(f"   Comando: {cmd}")
    print("   " + "-" * 50)
    
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=30)
        
        print(f"   C√≥digo de sa√≠da: {result.returncode}")
        
        if result.stdout:
            print("   STDOUT:")
            for line in result.stdout.split('\n')[:20]:  # Primeiras 20 linhas
                print(f"     {line}")
            if len(result.stdout.split('\n')) > 20:
                print("     ... (truncado)")
        
        if result.stderr:
            print("   STDERR:")
            for line in result.stderr.split('\n')[:20]:  # Primeiras 20 linhas
                print(f"     {line}")
            if len(result.stderr.split('\n')) > 20:
                print("     ... (truncado)")
        
        return result.returncode == 0, result.stdout, result.stderr
        
    except subprocess.TimeoutExpired:
        print("   ‚ùå Comando expirou (timeout)")
        return False, "", "Timeout"
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return False, "", str(e)


def check_test_structure():
    """Verifica a estrutura dos arquivos de teste"""
    print("\nüìÅ VERIFICANDO ESTRUTURA DE TESTES")
    print("=" * 60)
    
    # Verificar se diret√≥rio tests existe
    tests_dir = Path("tests")
    if not tests_dir.exists():
        print("‚ùå Diret√≥rio 'tests' n√£o existe!")
        return False
    
    print(f"‚úÖ Diret√≥rio tests existe: {tests_dir}")
    
    # Listar arquivos de teste
    test_files = list(tests_dir.glob("**/*.py"))
    print(f"\nüìÑ Arquivos de teste encontrados ({len(test_files)}):")
    
    for test_file in test_files:
        print(f"   ‚Ä¢ {test_file}")
        
        # Verificar se o arquivo pode ser lido
        try:
            with open(test_file, 'r', encoding='utf-8') as f:
                content = f.read()
            print(f"     ‚úÖ Leg√≠vel ({len(content)} chars)")
        except Exception as e:
            print(f"     ‚ùå Erro ao ler: {e}")
    
    return len(test_files) > 0


def check_specific_test_file():
    """Verifica um arquivo de teste espec√≠fico"""
    print("\nüîç VERIFICANDO ARQUIVO DE TESTE ESPEC√çFICO")
    print("=" * 60)
    
    test_file = "tests/unit/test_config.py"
    
    if not Path(test_file).exists():
        print(f"‚ùå {test_file} n√£o existe")
        # Listar o que existe em tests/
        print("\nArquivos em tests/:")
        if Path("tests").exists():
            for f in Path("tests").rglob("*.py"):
                print(f"   ‚Ä¢ {f}")
        return False
    
    print(f"‚úÖ {test_file} existe")
    
    # Tentar importar o arquivo diretamente
    print(f"\nüß™ Tentando importar {test_file} diretamente...")
    
    try:
        # Adicionar paths necess√°rios
        sys.path.insert(0, os.getcwd())
        sys.path.insert(0, os.path.join(os.getcwd(), 'tests'))
        
        # Importar o m√≥dulo
        import importlib.util
        spec = importlib.util.spec_from_file_location("test_config", test_file)
        test_module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(test_module)
        
        print("   ‚úÖ Importa√ß√£o direta funcionou!")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro na importa√ß√£o direta: {e}")
        
        # Mostrar traceback completo
        import traceback
        print("\n   üìã Traceback completo:")
        traceback.print_exc()
        
        return False


def test_pytest_discovery():
    """Testa descoberta de testes pelo pytest"""
    print("\nüîç TESTANDO DESCOBERTA DE TESTES")
    print("=" * 60)
    
    # Comando mais simples poss√≠vel
    success, stdout, stderr = run_command_detailed(
        "python -m pytest --collect-only",
        "Descoberta de testes"
    )
    
    if "collected" in stdout:
        print("‚úÖ Pytest conseguiu descobrir testes!")
        return True
    else:
        print("‚ùå Pytest n√£o conseguiu descobrir testes")
        return False


def test_minimal_pytest():
    """Testa pytest com configura√ß√£o m√≠nima"""
    print("\nüîç TESTANDO PYTEST M√çNIMO")
    print("=" * 60)
    
    # Criar arquivo de teste m√≠nimo
    minimal_test = """
def test_basic():
    assert True

def test_import():
    import sys
    assert sys is not None
"""
    
    with open("test_minimal_temp.py", "w") as f:
        f.write(minimal_test)
    
    try:
        success, stdout, stderr = run_command_detailed(
            "python -m pytest test_minimal_temp.py -v",
            "Teste m√≠nimo"
        )
        
        return success
        
    finally:
        # Remover arquivo tempor√°rio
        if Path("test_minimal_temp.py").exists():
            Path("test_minimal_temp.py").unlink()


def check_pytest_config():
    """Verifica configura√ß√£o do pytest"""
    print("\nüîç VERIFICANDO CONFIGURA√á√ÉO PYTEST")
    print("=" * 60)
    
    config_files = ["pytest.ini", "pyproject.toml", "setup.cfg", "tox.ini"]
    
    for config_file in config_files:
        if Path(config_file).exists():
            print(f"üìÑ {config_file} encontrado")
            
            try:
                with open(config_file, 'r') as f:
                    content = f.read()
                
                # Mostrar linhas relevantes
                lines = content.split('\n')
                for i, line in enumerate(lines[:20]):  # Primeiras 20 linhas
                    if 'pytest' in line.lower() or 'test' in line.lower():
                        print(f"   {i+1:2}: {line}")
                        
            except Exception as e:
                print(f"   ‚ùå Erro ao ler {config_file}: {e}")
        else:
            print(f"   ‚ùì {config_file} n√£o encontrado")


def create_simple_test():
    """Cria um teste super simples para verificar se pytest funciona"""
    print("\nüîß CRIANDO TESTE SIMPLES")
    print("=" * 60)
    
    # Garantir que diret√≥rio tests existe
    Path("tests").mkdir(exist_ok=True)
    
    simple_test = '''# -*- coding: utf-8 -*-
"""
Teste simples para verificar se pytest funciona
"""

def test_true():
    """Teste mais b√°sico poss√≠vel"""
    assert True


def test_math():
    """Teste simples de matem√°tica"""
    assert 2 + 2 == 4


def test_string():
    """Teste simples de string"""
    assert "hello" == "hello"


def test_list():
    """Teste simples de lista"""
    my_list = [1, 2, 3]
    assert len(my_list) == 3


class TestBasic:
    """Classe de teste b√°sica"""
    
    def test_method(self):
        """M√©todo de teste"""
        assert 1 == 1
'''
    
    test_file = "tests/test_simple_verification.py"
    with open(test_file, 'w', encoding='utf-8') as f:
        f.write(simple_test)
    
    print(f"‚úÖ Criado: {test_file}")
    
    # Testar este arquivo espec√≠fico
    success, stdout, stderr = run_command_detailed(
        f"python -m pytest {test_file} -v",
        f"Executando {test_file}"
    )
    
    return success


def main():
    """Diagn√≥stico completo"""
    print("üîç DIAGN√ìSTICO COMPLETO DO PYTEST")
    print("=" * 60)
    print("Vamos descobrir exatamente qual √© o problema...")
    print()
    
    results = {}
    
    # 1. Verificar estrutura
    results['structure'] = check_test_structure()
    
    # 2. Verificar configura√ß√£o
    check_pytest_config()
    
    # 3. Teste m√≠nimo
    results['minimal'] = test_minimal_pytest()
    
    # 4. Descoberta de testes
    results['discovery'] = test_pytest_discovery()
    
    # 5. Arquivo espec√≠fico
    results['specific_file'] = check_specific_test_file()
    
    # 6. Criar e testar arquivo simples
    results['simple_test'] = create_simple_test()
    
    # Resumo
    print("\n" + "=" * 60)
    print("üìä RESUMO DO DIAGN√ìSTICO")
    print("=" * 60)
    
    for test_name, result in results.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {test_name}: {'OK' if result else 'PROBLEMA'}")
    
    # Recomenda√ß√µes
    print("\nüìã RECOMENDA√á√ïES:")
    
    if results.get('minimal', False):
        print("‚úÖ Pytest est√° funcionando b√°sico")
        
        if not results.get('discovery', False):
            print("‚ùå Problema na descoberta de testes")
            print("   ‚Ä¢ Verifique a estrutura do diret√≥rio tests/")
            print("   ‚Ä¢ Verifique se h√° arquivos __init__.py")
            print("   ‚Ä¢ Verifique configura√ß√£o do pytest")
        
        if not results.get('specific_file', False):
            print("‚ùå Problema em arquivo de teste espec√≠fico")
            print("   ‚Ä¢ Verifique imports nos arquivos de teste")
            print("   ‚Ä¢ Execute: python -c 'from app.config import settings'")
    
    else:
        print("‚ùå Pytest n√£o est√° funcionando nem em casos simples")
        print("   ‚Ä¢ Reinstale pytest: pip install --force-reinstall pytest")
        print("   ‚Ä¢ Verifique ambiente virtual")
        print("   ‚Ä¢ Verifique vers√£o do Python")
    
    print("\nüéØ PR√ìXIMO PASSO:")
    if results.get('simple_test', False):
        print("Execute: python -m pytest tests/test_simple_verification.py -v")
    else:
        print("Execute: pip install --force-reinstall pytest pytest-cov")


if __name__ == "__main__":
    main()