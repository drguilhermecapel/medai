name: Coverage Check and Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  backend-coverage:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: medai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev
    
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/medai_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "TESTING=true" >> $GITHUB_ENV
    
    - name: Run database migrations
      run: |
        cd backend
        python -m alembic upgrade head
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/medai_test
    
    - name: Run backend tests with coverage
      run: |
        cd backend
        python -m pytest \
          --cov=app \
          --cov-report=xml:coverage.xml \
          --cov-report=html:htmlcov \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          --junitxml=test-results.xml \
          -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/medai_test
        REDIS_URL: redis://localhost:6379
        PYTHONPATH: ${{ github.workspace }}/backend
    
    - name: Check critical components coverage
      run: |
        cd backend
        python ../scripts/coverage_monitor.py --backend-only
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/medai_test
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: true
    
    - name: Archive backend coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: backend-coverage-report
        path: |
          backend/htmlcov/
          backend/coverage.xml
          backend/test-results.xml

  frontend-coverage:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests with coverage
      run: |
        cd frontend
        npm run test:coverage
    
    - name: Check frontend coverage thresholds
      run: |
        cd frontend
        npm run test:coverage:check
    
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: true
    
    - name: Archive frontend coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: frontend-coverage-report
        path: |
          frontend/coverage/

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-coverage, frontend-coverage]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: medai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock
    
    - name: Run integration tests
      run: |
        cd backend
        python -m pytest tests/test_integration_comprehensive.py \
          --cov=app \
          --cov-report=xml:integration-coverage.xml \
          -v -m integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/medai_test
        REDIS_URL: redis://localhost:6379
        PYTHONPATH: ${{ github.workspace }}/backend
    
    - name: Run E2E tests
      run: |
        cd backend
        python -m pytest tests/test_e2e_comprehensive.py \
          --cov=app \
          --cov-report=xml:e2e-coverage.xml \
          -v -m e2e
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/medai_test
        REDIS_URL: redis://localhost:6379
        PYTHONPATH: ${{ github.workspace }}/backend

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r backend/app -f json -o bandit-report.json
    
    - name: Run Safety check
      run: |
        pip install safety
        cd backend
        safety check --json --output safety-report.json
    
    - name: Archive security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          backend/safety-report.json

  performance-tests:
    runs-on: ubuntu-latest
    needs: [backend-coverage]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-benchmark
    
    - name: Run performance tests
      run: |
        cd backend
        python -m pytest tests/ -v -m performance --benchmark-json=benchmark-results.json
      env:
        PYTHONPATH: ${{ github.workspace }}/backend
    
    - name: Archive performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: backend/benchmark-results.json

  coverage-consolidation:
    runs-on: ubuntu-latest
    needs: [backend-coverage, frontend-coverage, integration-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Download all coverage artifacts
      uses: actions/download-artifact@v3
    
    - name: Install coverage tools
      run: |
        pip install coverage
    
    - name: Generate consolidated coverage report
      run: |
        python scripts/coverage_monitor.py --project-root .
    
    - name: Check coverage thresholds
      run: |
        python scripts/coverage_monitor.py --project-root . > coverage-summary.txt
        cat coverage-summary.txt
    
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const coverageSummary = fs.readFileSync('coverage-summary.txt', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üìä Coverage Report\n\n\`\`\`\n${coverageSummary}\n\`\`\``
          });
    
    - name: Fail if coverage below threshold
      run: |
        python scripts/coverage_monitor.py --project-root .
        exit_code=$?
        if [ $exit_code -ne 0 ]; then
          echo "‚ùå Coverage below required thresholds"
          exit 1
        fi
        echo "‚úÖ Coverage meets all requirements"

  quality-gates:
    runs-on: ubuntu-latest
    needs: [coverage-consolidation, security-scan, performance-tests]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.coverage-consolidation.result }}" == "success" && 
              "${{ needs.security-scan.result }}" == "success" && 
              "${{ needs.performance-tests.result }}" == "success" ]]; then
          echo "‚úÖ All quality gates passed"
          exit 0
        else
          echo "‚ùå One or more quality gates failed"
          echo "Coverage: ${{ needs.coverage-consolidation.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
          echo "Performance: ${{ needs.performance-tests.result }}"
          exit 1
        fi

