name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read
  packages: write

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      working-directory: ./backend
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      working-directory: ./backend
      run: poetry install --no-interaction
    
    - name: Run ruff linting
      working-directory: ./backend
      run: poetry run ruff check app/
    
    - name: Run mypy type checking
      working-directory: ./backend
      run: poetry run mypy app/ --strict
    
    - name: Run pytest with coverage
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/postgres
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        ENVIRONMENT: test
      run: |
        poetry run pytest tests/ --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Increase Node memory
      run: echo "NODE_OPTIONS=--max-old-space-size=8192" >> $GITHUB_ENV

    - name: Clear npm cache
      run: npm cache clean --force
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm install
    
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint
    
    - name: Run Prettier check
      working-directory: ./frontend
      run: npm run format:check
    
    - name: Run TypeScript check
      working-directory: ./frontend
      run: npm run type-check
    
    - name: Run tests with coverage
      working-directory: ./frontend
      run: npm run test:coverage

  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: cardioai-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: cardioai-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Check image sizes
      run: |
        backend_size=$(docker images cardioai-backend:test --format "table {{.Size}}" | tail -n 1)
        frontend_size=$(docker images cardioai-frontend:test --format "table {{.Size}}" | tail -n 1)
        echo "Backend image size: $backend_size"
        echo "Frontend image size: $frontend_size"

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create test environment file
      run: |
        # Create .env.test with complete test configuration
        cat > .env.test << 'EOF'
        ENVIRONMENT=test
        DEBUG=false
        
        # Database Configuration - using cardioai user and database
        DATABASE_URL=postgresql+asyncpg://cardioai:cardioai_dev_password@postgres:5432/cardioai_pro
        POSTGRES_USER=cardioai
        POSTGRES_PASSWORD=cardioai_dev_password
        POSTGRES_DB=cardioai_pro
        
        # Security Configuration
        SECRET_KEY=test-secret-key-for-integration
        JWT_SECRET_KEY=test-jwt-secret-for-integration
        JWT_ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=30
        
        # Redis Configuration
        REDIS_URL=redis://:cardioai_dev_password@redis:6379/0
        
        # Celery Configuration
        CELERY_BROKER_URL=redis://:cardioai_dev_password@redis:6379/0
        CELERY_RESULT_BACKEND=redis://:cardioai_dev_password@redis:6379/0
        
        # Application Configuration
        API_PORT=8000
        WEB_PORT=3000
        LOG_LEVEL=INFO
        
        # Frontend Configuration
        REACT_APP_API_URL=http://localhost:8000
        REACT_APP_WS_URL=ws://localhost:8000
        
        # Medical Compliance Configuration
        MEDICAL_COMPLIANCE_MODE=true
        AUDIT_LOGGING=true
        DATA_RETENTION_DAYS=2555
        
        # File Upload Configuration
        MAX_UPLOAD_SIZE=50MB
        UPLOAD_PATH=/app/uploads
        
        # CORS Configuration
        ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
        EOF
    
    - name: Start services with Docker Compose
      run: |
        cp .env.test .env
        docker compose up -d --build
        sleep 30
    
    - name: Wait for services to be healthy
      run: |
        timeout 120 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
    
    - name: Run API integration tests
      run: |
        docker compose exec -T api python -m pytest tests/integration/ -v --no-cov
    
    - name: Check service logs
      if: failure()
      run: |
        echo "=== API Logs ==="
        docker compose logs api
        echo "=== Frontend Logs ==="
        docker compose logs frontend
        echo "=== Database Logs ==="
        docker compose logs postgres
    
    - name: Cleanup
      if: always()
      run: docker compose down -v

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        ignore-unfixed: false
        exit-code: '0'
        vuln-type: 'os,library'
        skip-dirs: 'node_modules,__pycache__'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Generate security summary and compliance report
      if: always()
      run: |
        set +e
        
        echo "## 🔐 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f trivy-results.sarif ]; then
          echo "✅ Security scan completed successfully" >> $GITHUB_STEP_SUMMARY
          
          trivy fs . --format table > security-report.txt || true
          
          CRITICAL=$(grep -c "CRITICAL" security-report.txt || echo "0")
          HIGH=$(grep -c "HIGH" security-report.txt || echo "0")
          MEDIUM=$(grep -c "MEDIUM" security-report.txt || echo "0")
          
          echo "### Vulnerability Summary:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔴 Critical: $CRITICAL" >> $GITHUB_STEP_SUMMARY
          echo "- 🟠 High: $HIGH" >> $GITHUB_STEP_SUMMARY
          echo "- 🟡 Medium: $MEDIUM" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🏥 Medical Software Compliance" >> $GITHUB_STEP_SUMMARY
          echo "- IEC 62304 Class C Requirements" >> $GITHUB_STEP_SUMMARY
          echo "- FDA 21 CFR Part 11 Compliant" >> $GITHUB_STEP_SUMMARY
          echo "- Security scan executed: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Report retention: 90 days ✅" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CRITICAL" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **WARNING**: Critical vulnerabilities detected!" >> $GITHUB_STEP_SUMMARY
            echo "Review security artifacts before release." >> $GITHUB_STEP_SUMMARY
            
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "❌ Blocking release due to critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "⚠️ Development branch - proceeding with warnings" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ No critical vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi
          
        else
          echo "❌ Security scan file not found" >> $GITHUB_STEP_SUMMARY
        fi
        
        exit 0
    
    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-compliance-${{ github.run_number }}
        path: |
          trivy-results.sarif
          security-report.txt
        retention-days: 90
