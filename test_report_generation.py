#!/usr/bin/env python3
"""
Test script for report generation functionality
"""

import sys
import os
sys.path.append('/app')

import json
from pathlib import Path

def test_clinical_validation_report():
    """Test clinical validation report generation"""
    print("üìã Testing Clinical Validation Report Generation...")
    
    try:
        import numpy as np
        from app.validation.clinical_validation import ClinicalValidationFramework, PathologyType
        
        validator = ClinicalValidationFramework()
        
        np.random.seed(42)
        predictions = np.random.random(10000)
        ground_truth = np.random.choice([0, 1], 10000, p=[0.9, 0.1])
        detection_times = np.random.uniform(5000, 15000, 10000)
        
        try:
            validator.validate_pathology_detection(
                PathologyType.STEMI, 
                predictions, 
                ground_truth, 
                detection_times
            )
        except ValueError as e:
            print(f"  Expected validation failure: {e}")
        
        report = validator.generate_validation_report()
        
        print("‚úÖ Clinical validation report generated successfully")
        print(f"  Framework: {report['validation_framework']}")
        print(f"  Compliance Level: {report['compliance_level']}")
        print(f"  Validation Date: {report['validation_date']}")
        print(f"  Overall Compliance: {report['overall_compliance']}")
        print(f"  Recommendations: {len(report['recommendations'])} items")
        
        required_fields = ['validation_framework', 'compliance_level', 'validation_date', 
                          'pathology_results', 'overall_compliance', 'recommendations']
        for field in required_fields:
            assert field in report, f"Missing required field: {field}"
        
        return True
        
    except Exception as e:
        print(f"‚ùå Clinical validation report test failed: {e}")
        return False

def test_pymupdf_availability():
    """Test PyMuPDF library availability for PDF generation"""
    print("\nüìÑ Testing PyMuPDF PDF Generation Capability...")
    
    try:
        import fitz  # PyMuPDF
        
        doc = fitz.open()
        page = doc.new_page()
        
        text = "SPEI Medical Report Test\nGenerated by PyMuPDF"
        page.insert_text((50, 50), text, fontsize=12)
        
        pdf_bytes = doc.tobytes()
        doc.close()
        
        print("‚úÖ PyMuPDF PDF generation successful")
        print(f"  Generated PDF size: {len(pdf_bytes)} bytes")
        print(f"  PyMuPDF version: {fitz.version}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå PyMuPDF test failed: {e}")
        return False

def test_medical_compliance_report():
    """Test medical compliance report structure"""
    print("\nüè• Testing Medical Compliance Report Structure...")
    
    try:
        compliance_report = {
            "report_type": "Medical Device Compliance",
            "regulatory_frameworks": ["FDA 510(k)", "EU MDR", "ANVISA"],
            "device_classification": "Class II Medical Device Software",
            "compliance_status": "In Progress",
            "validation_summary": {
                "clinical_validation": "Ultra-Rigorous Framework",
                "software_validation": "IEC 62304 Compliant",
                "risk_management": "ISO 14971 Applied"
            },
            "quality_system": "ISO 13485:2016",
            "cybersecurity": "IEC 81001-5-1 Compliant",
            "audit_trail": "Complete and Immutable"
        }
        
        print("‚úÖ Medical compliance report structure validated")
        print(f"  Regulatory frameworks: {len(compliance_report['regulatory_frameworks'])}")
        print(f"  Device classification: {compliance_report['device_classification']}")
        print(f"  Quality system: {compliance_report['quality_system']}")
        
        required_fields = ['report_type', 'regulatory_frameworks', 'device_classification',
                          'compliance_status', 'validation_summary', 'quality_system']
        for field in required_fields:
            assert field in compliance_report, f"Missing compliance field: {field}"
        
        return True
        
    except Exception as e:
        print(f"‚ùå Medical compliance report test failed: {e}")
        return False

if __name__ == "__main__":
    print("üìä SPEI Report Generation Testing")
    print("=" * 50)
    
    success = True
    
    success &= test_clinical_validation_report()
    
    success &= test_pymupdf_availability()
    
    success &= test_medical_compliance_report()
    
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ All report generation tests PASSED")
        sys.exit(0)
    else:
        print("‚ùå Some report generation tests FAILED")
        sys.exit(1)
