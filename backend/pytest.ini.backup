[pytest]
# Diretórios de teste
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Opções de execução
addopts = 
    -v
    -s
    --strict-markers
    --tb=short
    --cov=app
    --cov-report=html
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=80
    --maxfail=1
    --disable-warnings
    -p no:warnings

# Marcadores customizados
markers =
    slow: marca testes que demoram para executar
    integration: marca testes de integração
    unit: marca testes unitários
    e2e: marca testes end-to-end
    critical: marca testes de componentes críticos
    auth: marca testes de autenticação
    ml: marca testes de machine learning
    validation: marca testes de validação

# Configuração de asyncio
asyncio_mode = auto

# Timeout para testes
timeout = 300

# Configuração de logs
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Filtros de avisos
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::FutureWarning
    ignore::UserWarning:sqlalchemy.*

# Configuração de cobertura
[coverage:run]
source = app
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */alembic/*
    */config.py
    */main.py
    */__init__.py

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstract

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml