[tool.poetry]
name = "cardioai-pro-backend"
version = "1.0.0"
description = "CardioAI Pro - Enterprise ECG Analysis Backend"
authors = ["CardioAI Team <dev@cardioai.pro>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.110.0"
uvicorn = {extras = ["standard"], version = "^0.29.0"}
python-multipart = "^0.0.9"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.29"}
alembic = "^1.13.1"
asyncpg = "^0.29.0"
psycopg2-binary = "^2.9.9"
pydantic = {extras = ["email"], version = "^2.6.4"}
pydantic-settings = "^2.2.1"
email-validator = "^2.1.1"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
redis = {extras = ["hiredis"], version = "^5.0.4"}
celery = "^5.3.6"
kombu = "^5.3.7"
numpy = "^1.26.4"
scipy = "^1.13.0"
scipy-stubs = "^1.11.0"
onnxruntime = "^1.17.3"
neurokit2 = "^0.2.7"
pywavelets = "^1.4.1"
psutil = "^5.9.8"
opencv-python-headless = "^4.9.0.80"
scikit-image = "^0.22.0"
pillow = "^10.3.0"
pymupdf = "^1.24.1"
structlog = "^24.1.0"
sentry-sdk = {extras = ["fastapi", "celery"], version = "^1.45.0"}
prometheus-fastapi-instrumentator = "^7.0.0"
aiofiles = "^23.2.1"
python-dotenv = "^1.0.1"
httpx = "^0.27.0"
shap = "^0.45.0"
lime = "^0.2.0.1"
plotly = "^5.19.0"
websockets = "^12.0"
aiosqlite = "^0.21.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.1.1"
pytest-asyncio = "^0.23.6"
pytest-cov = "^5.0.0"
ruff = "^0.3.4"
mypy = "^1.9.0"
black = "^24.3.0"
isort = "^5.13.2"
pre-commit = "^3.7.0"
types-psutil = "^5.9.5"
types-redis = "^4.6.0"
celery-types = "^0.22.0"
types-passlib = "^1.7.7"
types-python-jose = "^3.3.4"
types-requests = "^2.31.0"
pandas-stubs = "^2.2.3.250527"
wfdb = "^4.3.0"
pyedflib = "^0.1.40"
pywavelets = "^1.8.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true


[[tool.mypy.overrides]]
module = [
    "neurokit2.*",
    "cv2.*",
    "onnxruntime.*",
    "shap.*",
    "lime.*",
    "plotly.*",
    "wfdb.*",
    "pyedflib.*",
    "biosppy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
